Операторы потока управления: for, if, else, switch и defer
Узнайте как контролировать порядок выполнения программы с помощью условий, циклов, операторов множественного выбора и отложенных вызовов.
#en: Flow control statements: for, if, else, switch and defer
#en: Learn how to control the flow of your code with conditionals, loops, switches and defers.

The Go Authors
https://golang.org

* Цикл For
#en: * For

В Go есть только один вид циклов - цикл `for`.
#en: Go has only one looping construct, the `for` loop.

Объявление цикла `for` состоит из трех выражений, разделенных точкой с запятой:
#en: The basic `for` loop has three components separated by semicolons:

- Инициализирующее выражение: выполняется до первой итерации.
- Выражение-условие цикла: выполняется перед каждой итерацией.
- Завершающее выражение: выполняется в конце каждой итерации.
#en: - the init statement: executed before the first iteration
#en: - the condition expression: evaluated before every iteration
#en: - the post statement: executed at the end of every iteration

Инициализирующее выражение часто представленно в виде краткого объявления
переменных. Объявленные внутри этого выражения переменные будут видны только в
области видимости текущего цикла `for`.
#en: The init statement will often be a short variable declaration, and the
#en: variables declared there are visible only in the scope of the `for`
#en: statement.

Цикл будет закончен сразу, как только выражение-условие цикла станет равным `false`.
#en: The loop will stop iterating once the boolean condition evaluates to `false`.

_Заметка_: В отличии от таких языков, как C, Java или Javascript, в Go нет
круглых скобок вокруг объявления цикла `for`, но при этом
фигурные скобки `{`}` являются обязательными.
#en: _Note_: Unlike other languages like C, Java, or Javascript there are no parentheses
#en: surrounding the three components of the `for` statement and the braces `{`}` are
#en: always required.

.play flowcontrol/for.go

* Цикл For продолжение
#en: * For continued

Инициализирующее и завершающие выражения могут быть пропущены.
#en: The init and post statement are optional.

.play flowcontrol/for-continued.go

* For это "while" в Go
#en: * For is Go's "while"

В этом случае все три выражения можно опустить: `while` из C это `for` в Go.
#en: At that point you can drop the semicolons: C's `while` is spelled `for` in Go.

.play flowcontrol/for-is-gos-while.go

* Бесконечный цикл.
#en: * Forever

Если вы пропустите выражение-условие цикла, то он будет продолжаться вечно. Это краткая форма записи бесконечных циклов.
#en: If you omit the loop condition it loops forever, so an infinite loop is compactly expressed.

.play flowcontrol/forever.go

* Условия
#en: * If

В Go условия `if` похожи на циклы `for` в своем синтаксисе: вокруг них не нужно ставить
круглые скобки, но фигурные скобки `{`}` являются обязательными.
#en: Go's `if` statements are like its `for` loops; the expression need not be
#en: surrounded by parentheses `(`)` but the braces `{`}` are required.

.play flowcontrol/if.go

* Условия с коротким выражением
#en: * If with a short statement

Также, как и `for`, условия `if` могут начинаться с короткого выражения которое будет выполнено
перед проверкой условия.
#en: Like `for`, the `if` statement can start with a short statement to execute before the condition.

Переменные объявленные в этом выражении, будут видны только до конца блока `if`.
#en: Variables declared by the statement are only in scope until the end of the `if`.

(Попробуйте вернуть `v` в последнем операторе `return`.)
#en: (Try using `v` in the last `return` statement.)

.play flowcontrol/if-with-a-short-statement.go

* Условия с ветвлениями
#en: * If and else

Переменные объявленные внутри короткого выражения `if`, также доступны внутри
следующих блоков `else`.
#en: Variables declared inside an `if` short statement are also available inside any
#en: of the `else` blocks.

(Оба вызова `pow` будут выполнены, а их результаты возвращены до того, как `fmt.Println`
будет вызвана в функции `main`)
#en: (Both calls to `pow` are executed and return before the call to `fmt.Println`
#en: in `main` begins.)

.play flowcontrol/if-and-else.go

* Упражнение: Циклы и Функции
#en: * Exercise: Loops and Functions

В качестве простой игры с функциями и циклами напишите функцию получения квадратного корня числа, используя метод Ньютона.
#en: As a simple way to play with functions and loops, implement the square root function using Newton's method.

В этом случае метод Ньютона заключается в аппроксимации `Sqrt(x)` через выбор начальной точки _z_, а затем повторе:
#en: In this case, Newton's method is to approximate `Sqrt(x)` by picking a starting point _z_ and then repeating:

.image /content/img/newton.png

Для начала повторите вычисление 10 раз и посмотрите как близко вы сможете приблизиться к ответу для различных чисел (1, 2, 3, ...).
#en: To begin with, just repeat that calculation 10 times and see how close you get to the answer for various values (1, 2, 3, ...).

Затем, измените условие цикла чтобы цикл прекращал свое выполнение сразу, как только значение прекратило изменяться (или изменилось на очень малую величину). Посмотрите, как это отразилось на числе итераций. Насколько ваше решение близко к [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?
#en: Next, change the loop condition to stop once the value has stopped changing (or only changes by a very small delta). See if that's more or fewer iterations. How close are you to the [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

Совет: для объявления и инициализации числа с плавающей точкой используйте синтаксис объявления чисел с плавающей точкой или преобразование: 

	z := float64(1)
	z := 1.0
#en: Hint: to declare and initialize a floating point value, give it floating point syntax or use a conversion:
#en:
#en:	z := float64(1)
#en:	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Оператор множественного выбора
#en: * Switch

Вы, наверное, знали как примерно будет выглядеть `switch`.
#en: You probably knew what `switch` was going to look like.

Конец блока `case` закончит выполнение автоматически, если в конце не будет оператора `fallthrough`.  
#en: A case body breaks automatically, unless it ends with a `fallthrough` statement.

.play flowcontrol/switch.go

* Порядок выполнения в операторе множественного выбора
#en: * Switch evaluation order

Блоки `case` выполняются сверху вниз, прекращая выполнение после первого успешного блока `case`.
#en: Switch cases evaluate cases from top to bottom, stopping when a case succeeds.

(Возьмем пример:

	switch i {
	case 0:
	case f():
	}

вызова `f` не будет, если `i==0`.)
#en:(For example,
#en:
#en:	switch i {
#en:	case 0:
#en:	case f():
#en:	}
#en:
#en:does not call `f` if `i==0`.)

#appengine: *Note:* Time in the Go playground always appears to start at
#appengine: 2009-11-10 23:00:00 UTC, a value whose significance is left as an
#appengine: exercise for the reader.

.play flowcontrol/switch-evaluation-order.go

* Оператор множественного выбора без условия
#en: * Switch with no condition

* `Switch` без условия эквивалентен `switch`true`.
#en: Switch without a condition is the same as `switch`true`.

Эта конструкция может использоваться в качестве замены длинных цепочек `if-then-else`. 
#en: This construct can be a clean way to write long if-then-else chains.

.play flowcontrol/switch-with-no-condition.go

* Отложенный вызов
#en: * Defer

Оператор `defer` откладывает вызов функции до момента, когда произойдет возврат из
текущей функции.
#en: A defer statement defers the execution of a function until the surrounding
#en: function returns.

Аргументы отложенного вызова будут вычислены немедленно, но вызов функции будет
осуществлен только в момент возврата из текущей функции.
#en: The deferred call's arguments are evaluated immediately, but the function call
#en: is not executed until the surrounding function returns.

.play flowcontrol/defer.go

* Несколько отложенных вызовов
#en: * Stacking defers

Отложенные вызовы функций кладутся в стек. Когда текущая функция возвращается, ее
отложенные вызовы выполняются в порядке "от последнего к первому".
#en: Deferred function calls are pushed onto a stack. When a function returns, its
#en: deferred calls are executed in last-in-first-out order.

Больше об отложенных вызовах вы можете узнать тут
#en: To learn more about defer statements read this
[[https://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Поздравляем!
#en: * Congratulations!

Вы завершили этот урок!
#en: You finished this lesson!

Вы можете перейти назад к списку уроков, чтобы найти что-то новое для изучения, или продолжить со [[javascript:click('.next-page')][следующим уроком]].
#en: You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].